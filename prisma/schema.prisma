// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Permission {
  READ
  WRITE
  DELETE
  UPDATE
}

enum TypePiece {
  PASSPORT
  CARTE_ELECTEUR
  CARTE_IDENTITE
}

enum TypeActivity {
  MOTO_TAXI
  VOITURE_TAXI
  MOTO_PERSONNELLE
  VOITURE_PERSONNELLE
}

enum Periode {
  MENSUEL
  TRIMESTRIEL
  SEMESTRIEL
  ANNUEL
}

enum TypeProduit {
  VENTE
  LOCATION
}

enum StatusPassager {
  ANNULER
  AFFECTER
  ATTENTE
}

//endpoint implementer ok implementation frontend ok
model User {
  userId        Int            @id @default(autoincrement())
  firstname     String         @db.VarChar(80)
  lastname      String         @db.VarChar(80)
  username      String         @db.VarChar(80)
  sexe          String         @db.VarChar(15)
  email         String         @unique @db.VarChar(80)
  password      String         @db.VarChar(80)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  isDelete      Boolean        @default(false)
  proprietaires Proprietaire[]
  userRoles     UserRole[]
  syndicat      Syndicat[]
  boutiques     Boutique[]
}

//endpoint implementer ok
model Role {
  roleId          Int        @id @default(autoincrement())
  nameRole        String     @db.VarChar(80)
  descriptionRole String     @db.VarChar(180)
  permissions     Permission
  userRoles       UserRole[]
}

//endpoint implementer ok
model UserRole {
  userRoleId Int  @id @default(autoincrement())
  userId     Int
  roleId     Int
  user       User @relation(fields: [userId], references: [userId])
  role       Role @relation(fields: [roleId], references: [roleId])

  @@unique([userId, roleId])
}

//endpoint implementer ok implementation frontend ok
model Proprietaire {
  proprietaireId Int       @id @default(autoincrement())
  city           String    @db.VarChar(80)
  phone          String    @db.VarChar(80)
  nationality    String    @db.VarChar(80)
  dateOfBirth    String    @db.VarChar(80)
  typePice       TypePiece
  isdeletd       Boolean
  pieceNumber    String    @db.VarChar(180)
  userId         Int
  user           User      @relation(fields: [userId], references: [userId])
  engins         Engin[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

//endpoint implementer ok implementation frontend ok
model Engin {
  enginId            Int          @id @default(autoincrement())
  immatricule        String       @db.VarChar(80)
  marque             String       @db.VarChar(80)
  model              String       @db.VarChar(80)
  typeActivity       TypeActivity
  dateService        String
  numeroCarteVerte   String       @db.VarChar(80)
  existAssurance     Boolean
  dateEpireAssurance String
  existCarteGris     Boolean
  dateEpireCarteGris String
  existVignette      Boolean
  dateEpireVignette  String
  isdeleted          Boolean

  proprietaireId Int
  proprietaire   Proprietaire @relation(fields: [proprietaireId], references: [proprietaireId])

  enginTaxes EnginTaxe[]

  lineId Int?
  line   Line? @relation(fields: [lineId], references: [id])

  trajets Trajet[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//endpoint implementer ok
model Taxe {
  taxeId         Int         @id @default(autoincrement())
  montant        Float
  periode        Periode
  statutPaiement String      @db.VarChar(80)
  isdeleted      Boolean
  enginTaxes     EnginTaxe[]
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
}

//endpoint implementer ok implementation frontend ok
model EnginTaxe {
  enginTaxeId  Int      @id @default(autoincrement())
  enginId      Int
  engin        Engin    @relation(fields: [enginId], references: [enginId])
  taxeId       Int
  taxe         Taxe     @relation(fields: [taxeId], references: [taxeId])
  datePaiement DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@unique([enginId, taxeId])
}

//endpoint implementer ok
model Boutique {
  boutiqueId     Int       @id @default(autoincrement())
  nomBoutique    String    @db.VarChar(80)
  pays           String    @db.VarChar(50)
  ville          String    @db.VarChar(180)
  quartier       String    @db.VarChar(180)
  phone          String    @db.VarChar(180)
  existAgreement Boolean
  altitude       Float
  isdeleted      Boolean
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  longitude      Float
  latitude       Float
  produits       Produit[]
  userId         Int
  user           User      @relation(fields: [userId], references: [userId])
}

//endpoint implementer ok
model Produit {
  produitId   Int         @id @default(autoincrement())
  nomProduit  String      @db.VarChar(80)
  photo       String      @db.VarChar(255)
  description String      @db.VarChar(255)
  intereseted Boolean
  isdeleted   Boolean
  prix        Float
  type        TypeProduit
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  boutiqueId  Int
  boutique    Boutique    @relation(fields: [boutiqueId], references: [boutiqueId])
}

//endpoint implementer ok
model Passager {
  passagerId       Int            @id @default(autoincrement())
  nom              String         @db.VarChar(80)
  prenom           String         @db.VarChar(80)
  villeDepart      String         @db.VarChar(80)
  villeDestination String         @db.VarChar(80)
  phone            String         @unique @db.VarChar(80)
  status           StatusPassager
  gareId           Int
  gare             Gare           @relation(fields: [gareId], references: [gareId])
  isdeleted        Boolean

  trajets   Trajet[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//endpoint implementer ok implementation frontend ok
model Gare {
  gareId       Int           @id @default(autoincrement())
  nom          String        @db.VarChar(80)
  city         String        @db.VarChar(180)
  longitude    String        @db.VarChar(180)
  altitude     String        @db.VarChar(180)
  latitude     String        @db.VarChar(180)
  isdeleted    Boolean
  destinations Destination[]
  trajets      Trajet[]
  passager     Passager[]
  syndicatId   Int
  syndicat     Syndicat      @relation(fields: [syndicatId], references: [id])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Syndicat     Syndicat[]    @relation("GareSyndicat")
}

//endpoint implementer ok
model Destination {
  destinationId    Int      @id @default(autoincrement())
  villeDepart      String   @db.VarChar(80)
  villeDestination String   @db.VarChar(80)
  prix             Float
  gareId           Int
  isdeleted        Boolean
  gare             Gare     @relation(fields: [gareId], references: [gareId])
  trajets          Trajet[]
}

//endpoint implementer ok implementation frontend ok
model Syndicat {
  id          Int     @id @default(autoincrement())
  phone       String  @db.VarChar(80)
  dateOfBirth String  @db.VarChar(80)
  nationality String  @db.VarChar(80)
  ville       String  @db.VarChar(80)
  quartier    String  @db.VarChar(80)
  lines       Line[]
  userId      Int
  isdeleted   Boolean
  user        User    @relation(fields: [userId], references: [userId])
  gares       Gare[]  @relation("GareSyndicat")

  Gare Gare[]
}

//endpoint implementer ok implementation frontend ok
model Line {
  id         Int      @id @default(autoincrement())
  nomline    String   @db.VarChar(80)
  ville      String   @db.VarChar(80)
  quartier   String   @db.VarChar(80)
  longitude  String   @db.VarChar(180)
  altitude   String   @db.VarChar(180)
  latitude   String   @db.VarChar(180)
  isdeleted  Boolean
  syndicatId Int
  syndicat   Syndicat @relation(fields: [syndicatId], references: [id])
  engins     Engin[]
}

model Trajet {
  trajetId      Int     @id @default(autoincrement())
  passagerId    Int
  enginId       Int
  destinationId Int
  gareId        Int
  isdeleted     Boolean

  passager    Passager    @relation(fields: [passagerId], references: [passagerId])
  engin       Engin       @relation(fields: [enginId], references: [enginId])
  destination Destination @relation(fields: [destinationId], references: [destinationId])
  gare        Gare        @relation(fields: [gareId], references: [gareId])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
